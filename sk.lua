-- –î–µ–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –ø–æ–¥–º–æ–¥—É–ª–µ–π SquadMod
-- –ü–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –ø–æ–¥–º–æ–¥—É–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ

print("üéØ –î–µ–∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø–æ–¥–º–æ–¥—É–ª–∏ SquadMod...")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local SquadMod = ReplicatedStorage.Mods.SquadMod

-- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –∞–≤—Ç–æ—Ñ–∞—Ä–º–∞
local priorityModules = {
    "UnitInfo",    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–Ω–∏—Ç–∞—Ö
    "LevelMod",    -- –£—Ä–æ–≤–Ω–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è  
    "SellMod",     -- –ü—Ä–æ–¥–∞–∂–∞ —é–Ω–∏—Ç–æ–≤
    "SlotsMod",    -- –°–ª–æ—Ç—ã –¥–ª—è —é–Ω–∏—Ç–æ–≤
    "ViewMod"      -- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
}

-- –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è
local function decompileModule(module)
    local success, result = pcall(function()
        if decompile then
            return decompile(module)
        elseif getscriptclosure then
            local closure = getscriptclosure(module)
            if closure and decompileFunction then
                return decompileFunction(closure)
            end
        end
        error("–î–µ–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    end)
    
    if success and result and #result > 50 then
        return result
    else
        return "-- FAILED TO DECOMPILE: " .. module.Name .. 
               "\n-- Error: " .. tostring(result) ..
               "\n-- [SOURCE CODE NOT AVAILABLE]"
    end
end

-- –î–µ–∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏
for _, moduleName in ipairs(priorityModules) do
    local module = SquadMod:FindFirstChild(moduleName)
    if module then
        print("üîß –î–µ–∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º: " .. moduleName)
        
        local decompiled = decompileModule(module)
        
        local header = [[-- ]] .. moduleName .. [[ Decompiled
-- From: SquadMod.]] .. moduleName .. [[
-- Game: ]] .. game.PlaceId .. [[
-- Time: ]] .. os.date() .. [[

]]
        
        local content = header .. decompiled
        local filename = "SquadMod_" .. moduleName .. ".lua"
        
        local success, error_msg = pcall(function()
            writefile(filename, content)
        end)
        
        if success then
            print("‚úÖ " .. moduleName .. " —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        else
            print("‚ùå –û—à–∏–±–∫–∞ " .. moduleName .. ": " .. tostring(error_msg))
        end
    else
        print("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " .. moduleName)
    end
end

-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏
print("\nüìã –í—Å–µ –ø–æ–¥–º–æ–¥—É–ª–∏ SquadMod:")
for i, child in pairs(SquadMod:GetChildren()) do
    print("  " .. i .. ". " .. child.Name .. " (" .. child.ClassName .. ")")
end

print("\nüí° –ï—Å–ª–∏ –¥–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π:")
print("1. –î—Ä—É–≥–æ–π —ç–º—É–ª—è—Ç–æ—Ä —Å –ª—É—á—à–∏–º –¥–µ–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º")
print("2. –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ require() –∏ –≤—ã–≤–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π")
print("3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ RemoteEvents –≤–º–µ—Å—Ç–æ –¥–µ–∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
