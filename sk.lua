-- Tower Defense Auto GUI —Å –ø—Ä–æ—Å—Ç–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Grandg777/TDRblxSAS/refs/heads/main/inf.lua"))() -- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏
local settings = {
    autoSkip = false,
    autoStart = false, 
    autoReplay = false
}

-- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
local lastActions = {
    skip = 0,
    start = 0,
    replay = 0
}

-- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞—Ä–º —é–Ω–∏—Ç–æ–≤
local farmUnits = {
    farm1 = nil,
    farm2 = nil
}

local farmLevels = {
    farm1 = 0,
    farm2 = 0
}

local upgradePrices = {1100, 1500, 1500, 3000, 5000}
local connections = {}
local gui = nil

-- UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
local uiElements = {
    upgrade1Btn = nil,
    upgrade2Btn = nil
}

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–Ω–µ–≥
local function getMoney()
    local success, money = pcall(function()
        return LocalPlayer:WaitForChild("Money", 5).Value
    end)
    return success and money or 0
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI –∏–≥—Ä—ã
local function getGameUI()
    local success, result = pcall(function()
        local gu = PlayerGui:FindFirstChild("GU")
        local mainUI = PlayerGui:FindFirstChild("MainUI")
        
        if not gu or not mainUI then return nil end
        
        local menuFrame = gu:FindFirstChild("MenuFrame")
        local topFrame = menuFrame and menuFrame:FindFirstChild("TopFrame")
        local resultFrame = mainUI:FindFirstChild("ResultFrame")
        
        if not topFrame then return nil end
        
        return {
            skipButton = topFrame:FindFirstChild("Skip"),
            startButton = topFrame:FindFirstChild("Start"),
            resultFrame = resultFrame
        }
    end)
    
    return success and result or nil
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è
local function updateUpgradeButtons()
    if uiElements.upgrade1Btn then
        uiElements.upgrade1Btn:SetText("UF1 - " .. farmLevels.farm1 .. "/5")
    end
    if uiElements.upgrade2Btn then
        uiElements.upgrade2Btn:SetText("UF2 - " .. farmLevels.farm2 .. "/5")
    end
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–∞–≤–Ω–∞ —Ñ–∞—Ä–º —é–Ω–∏—Ç–∞
local function spawnFarmUnit(position, farmSlot)
    local money = getMoney()
    if money < 500 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å–ø–∞–≤–Ω–∞ (–Ω—É–∂–Ω–æ 500, –µ—Å—Ç—å " .. money .. ")")
        return false
    end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ RemoteEvent
    local success = pcall(function()
        local remotes = ReplicatedStorage:WaitForChild("Remotes", 5)
        local setEvent = remotes and remotes:FindFirstChild("SetEvent")
        
        if not setEvent then
            warn("‚ùå SetEvent remote –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return false
        end
        
        local args = {
            "GameStuff",
            {
                "Summon",
                "Teiuchi",
                position
            }
        }
        setEvent:FireServer(unpack(args))
    end)
    
    if success then
        print("üèóÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∞–≤–Ω —Ñ–∞—Ä–º —é–Ω–∏—Ç–∞ " .. farmSlot)
        
        -- –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —é–Ω–∏—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        task.wait(1)
        
        local unitFolder = workspace:FindFirstChild("UnitFolder")
        if unitFolder then
            -- –ò—â–µ–º –Ω–æ–≤–æ–≥–æ Teiuchi
            local units = {}
            for _, unit in pairs(unitFolder:GetChildren()) do
                if unit.Name == "Teiuchi" and unit:IsA("Model") then
                    table.insert(units, unit)
                end
            end
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —é–Ω–∏—Ç—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            for _, unit in pairs(units) do
                if farmSlot == "farm1" and not farmUnits.farm1 then
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ—Ç —é–Ω–∏—Ç –Ω–µ farm2
                    if unit ~= farmUnits.farm2 then
                        farmUnits.farm1 = unit
                        farmLevels.farm1 = 0
                        print("‚úÖ –§–∞—Ä–º —é–Ω–∏—Ç 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                        updateUpgradeButtons()
                        return true
                    end
                elseif farmSlot == "farm2" and not farmUnits.farm2 then
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ—Ç —é–Ω–∏—Ç –Ω–µ farm1
                    if unit ~= farmUnits.farm1 then
                        farmUnits.farm2 = unit
                        farmLevels.farm2 = 0
                        print("‚úÖ –§–∞—Ä–º —é–Ω–∏—Ç 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                        updateUpgradeButtons()
                        return true
                    end
                end
            end
        end
    end
    
    return false
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ñ–∞—Ä–º —é–Ω–∏—Ç–∞
local function upgradeFarmUnit(farmSlot)
    local unit = farmUnits[farmSlot]
    if not unit or not unit.Parent then
        print("‚ùå –§–∞—Ä–º —é–Ω–∏—Ç " .. farmSlot .. " –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω")
        farmUnits[farmSlot] = nil
        farmLevels[farmSlot] = 0
        updateUpgradeButtons()
        return false
    end
    
    local currentLevel = farmLevels[farmSlot]
    if currentLevel >= 5 then
        print("‚ùå –§–∞—Ä–º —é–Ω–∏—Ç " .. farmSlot .. " —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è")
        return false
    end
    
    local requiredMoney = upgradePrices[currentLevel + 1]
    local money = getMoney()
    if money < requiredMoney then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è " .. farmSlot .. " (–Ω—É–∂–Ω–æ " .. requiredMoney .. ", –µ—Å—Ç—å " .. money .. ")")
        return false
    end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ RemoteFunction
    local success = pcall(function()
        local remotes = ReplicatedStorage:WaitForChild("Remotes", 5)
        local getFunction = remotes and remotes:FindFirstChild("GetFunction")
        
        if not getFunction then
            warn("‚ùå GetFunction remote –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return false
        end
        
        -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —é–Ω–∏—Ç–∞
        local args = {
            {
                Type = "GameStuff"
            },
            {
                "Upgrade",
                unit -- –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç —é–Ω–∏—Ç–∞
            }
        }
        getFunction:InvokeServer(unpack(args))
    end)
    
    if success then
        farmLevels[farmSlot] = currentLevel + 1
        print("‚¨ÜÔ∏è –§–∞—Ä–º —é–Ω–∏—Ç " .. farmSlot .. " —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è " .. farmLevels[farmSlot])
        updateUpgradeButtons()
        return true
    else
        warn("‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Ñ–∞—Ä–º —é–Ω–∏—Ç–∞ " .. farmSlot)
    end
    
    return false
end

-- –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
local function sendSkip()
    local currentTime = tick()
    if currentTime - lastActions.skip < 5 then return end -- –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
    
    local success = pcall(function()
        local remotes = ReplicatedStorage:WaitForChild("Remotes", 5)
        local gameStuff = remotes and remotes:FindFirstChild("GameStuff")
        
        if not gameStuff then
            warn("‚ùå GameStuff remote –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        end
        
        local args = {"SkipVoteYes"}
        gameStuff:FireServer(unpack(args))
        lastActions.skip = currentTime
    end)
    
    if success then
        print("‚è© –°–∫–∏–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    end
end

local function sendStart()
    local currentTime = tick()
    if currentTime - lastActions.start < 5 then return end -- –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
    
    local success = pcall(function()
        local remotes = ReplicatedStorage:WaitForChild("Remotes", 5)
        local gameStuff = remotes and remotes:FindFirstChild("GameStuff")
        
        if not gameStuff then
            warn("‚ùå GameStuff remote –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        end
        
        local args = {"StartVoteYes"}
        gameStuff:FireServer(unpack(args))
        lastActions.start = currentTime
    end)
    
    if success then
        print("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    end
end

local function sendReplay()
    local currentTime = tick()
    if currentTime - lastActions.replay < 10 then return end -- –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
    
    local success = pcall(function()
        local remotes = ReplicatedStorage:WaitForChild("Remotes", 5)
        local getFunction = remotes and remotes:FindFirstChild("GetFunction")
        
        if not getFunction then
            warn("‚ùå GetFunction remote –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        end
        
        local args = {
            {
                Type = "Game",
                Index = "Replay",
                Mode = "Reward"
            }
        }
        getFunction:InvokeServer(unpack(args))
        lastActions.replay = currentTime
    end)
    
    if success then
        print("üîÑ Replay –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    end
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI
local function createGUI()
    -- –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
    local Window = Library:CreateWindow({
        Name = "üéØ Tower Defense Auto",
        Size = UDim2.new(0, 250, 0, 280)
    })
    
    -- Auto —Ñ—É–Ω–∫—Ü–∏–∏
    local autoSkipToggle = Window:CreateToggle({
        Text = "Auto Skip",
        Default = false,
        Callback = function(value)
            settings.autoSkip = value
            print("üîß Auto Skip: " .. (value and "–≤–∫–ª—é—á–µ–Ω–æ" or "–≤—ã–∫–ª—é—á–µ–Ω–æ"))
        end
    })
    
    local autoStartToggle = Window:CreateToggle({
        Text = "Auto Start", 
        Default = false,
        Callback = function(value)
            settings.autoStart = value
            print("üîß Auto Start: " .. (value and "–≤–∫–ª—é—á–µ–Ω–æ" or "–≤—ã–∫–ª—é—á–µ–Ω–æ"))
        end
    })
    
    local autoReplayToggle = Window:CreateToggle({
        Text = "Auto Replay",
        Default = false,
        Callback = function(value)
            settings.autoReplay = value
            print("üîß Auto Replay: " .. (value and "–≤–∫–ª—é—á–µ–Ω–æ" or "–≤—ã–∫–ª—é—á–µ–Ω–æ"))
        end
    })
    
    -- –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ–Ω–µ–≥
    local moneyButton = Window:CreateButton({
        Text = "üí∞ Show Money",
        Callback = function()
            local money = getMoney()
            print("üí∞ –¢–µ–∫—É—â–∏–µ –¥–µ–Ω—å–≥–∏: " .. money)
        end
    })
    
    -- –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    Window:CreateSeparator()
    
    -- –ö–Ω–æ–ø–∫–∏ —Å–ø–∞–≤–Ω–∞
    local spawnRow = Window:CreateButtonRow()
    local spawn1Btn = spawnRow:AddButton({
        Text = "Spawn F1",
        Color = Color3.fromRGB(85, 255, 85),
        Callback = function()
            local position = CFrame.new(-53.786128997802734, 55.58282470703125, 1.467529296875, 1, 0, 0, 0, 1, 0, 0, 0, 1)
            spawnFarmUnit(position, "farm1")
        end
    })
    
    local spawn2Btn = spawnRow:AddButton({
        Text = "Spawn F2",
        Color = Color3.fromRGB(85, 255, 85),
        Callback = function()
            local position = CFrame.new(-40.75933074951172, 55.58282470703125, 2.94580078125, 1, 0, 0, 0, 1, 0, 0, 0, 1)
            spawnFarmUnit(position, "farm2")
        end
    })
    
    -- –ö–Ω–æ–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
    local upgradeRow = Window:CreateButtonRow()
    uiElements.upgrade1Btn = upgradeRow:AddButton({
        Text = "UF1 - 0/5",
        Color = Color3.fromRGB(255, 170, 85),
        Callback = function()
            upgradeFarmUnit("farm1")
        end
    })
    
    uiElements.upgrade2Btn = upgradeRow:AddButton({
        Text = "UF2 - 0/5",
        Color = Color3.fromRGB(255, 170, 85),
        Callback = function()
            upgradeFarmUnit("farm2")
        end
    })
    
    -- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —é–Ω–∏—Ç–æ–≤
    task.spawn(function()
        while Window.Enabled do
            task.wait(1)
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —é–Ω–∏—Ç–æ–≤
            for slot, unit in pairs(farmUnits) do
                if unit and not unit.Parent then
                    farmUnits[slot] = nil
                    farmLevels[slot] = 0
                    updateUpgradeButtons()
                    print("‚ö†Ô∏è –§–∞—Ä–º —é–Ω–∏—Ç " .. slot .. " –±—ã–ª —É–¥–∞–ª–µ–Ω")
                end
            end
        end
    end)
    
    return Window
end

-- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
local function startAutomation()
    -- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    local skipState = {
        lastVisible = false,
        lastSent = 0
    }
    
    local startState = {
        lastVisible = false,
        lastSent = 0
    }
    
    local replayState = {
        lastVisible = false,
        visibleStartTime = 0,
        sent = false
    }
    
    local connection = RunService.Heartbeat:Connect(function()
        if not gui or not gui.Enabled then return end
        
        local gameUI = getGameUI()
        if not gameUI then return end
        
        local currentTime = tick()
        
        -- Auto Skip
        if settings.autoSkip and gameUI.skipButton then
            local isVisible = gameUI.skipButton.Visible
            
            -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –∏ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            if isVisible and not skipState.lastVisible and (currentTime - skipState.lastSent) > 10 then
                sendSkip()
                skipState.lastSent = currentTime
            end
            
            skipState.lastVisible = isVisible
        end
        
        -- Auto Start
        if settings.autoStart and gameUI.startButton then
            local isVisible = gameUI.startButton.Visible
            
            -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –∏ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            if isVisible and not startState.lastVisible and (currentTime - startState.lastSent) > 10 then
                sendStart()
                startState.lastSent = currentTime
            end
            
            startState.lastVisible = isVisible
        end
        
        -- Auto Replay
        if settings.autoReplay and gameUI.resultFrame then
            local isVisible = gameUI.resultFrame.Visible
            
            if isVisible then
                -- –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏–ª—Å—è
                if not replayState.lastVisible then
                    replayState.visibleStartTime = currentTime
                    replayState.sent = false
                    print("‚è±Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑–∞–Ω, –∂–¥—É 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è Replay...")
                end
                
                -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                if not replayState.sent and (currentTime - replayState.visibleStartTime) >= 5 then
                    sendReplay()
                    replayState.sent = true
                end
            else
                -- –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫—Ä—ã—Ç
                if replayState.lastVisible then
                    replayState.visibleStartTime = 0
                    replayState.sent = false
                end
            end
            
            replayState.lastVisible = isVisible
        end
    end)
    
    table.insert(connections, connection)
end

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è GUI
local function closeGUI()
    -- –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    settings.autoSkip = false
    settings.autoStart = false
    settings.autoReplay = false
    
    -- –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for _, connection in ipairs(connections) do
        if connection then
            connection:Disconnect()
        end
    end
    connections = {}
    
    -- –û–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —é–Ω–∏—Ç–æ–≤
    farmUnits = {
        farm1 = nil,
        farm2 = nil
    }
    farmLevels = {
        farm1 = 0,
        farm2 = 0
    }
    
    -- –ó–∞–∫—Ä—ã–≤–∞–µ–º GUI
    if gui then
        gui.Enabled = false
        gui = nil
    end
    
    print("‚úÖ GUI –∑–∞–∫—Ä—ã—Ç, –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
end

-- –ó–∞–ø—É—Å–∫
print("üöÄ –ó–∞–ø—É—Å–∫ Tower Defense Auto GUI...")
gui = createGUI()

if gui then
    startAutomation()
    print("‚úÖ GUI —Å–æ–∑–¥–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π Toggle'—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.")
    
    -- –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –∫ –∫–Ω–æ–ø–∫–µ X –≤ GUI
    -- (–ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É)
else
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GUI")
end

-- –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
_G.CloseTowerDefenseAuto = closeGUI
